#include "DES.h"
int IP_1[64] = { 58, 50, 42, 34, 26, 18, 10, 2, 60, 52, 44, 36, 28, 20, 12, 4,
62, 54, 46, 38, 30, 22, 14, 6, 64, 56, 48, 40, 32, 24, 16, 8,
57, 49, 41, 33, 25, 17, 9,  1, 59, 51, 43, 35, 27, 19, 11, 3,
61, 53, 45, 37, 29, 21, 13, 5, 63, 55, 47, 39, 31, 23, 15, 7
};
int IP_2[64] = { 40, 8, 48, 16, 56, 24, 64, 32, 39, 7, 47, 15, 55, 23, 63, 31,
38, 6, 46, 14, 54, 22, 62, 30, 37, 5, 45, 13, 53, 21, 61, 29,
36, 4, 44, 12, 52, 20, 60, 28, 35, 3, 43, 11, 51, 19, 59, 27,
34, 2, 42, 10, 50, 18, 58, 26, 33, 1, 41, 9, 49, 17, 57, 25,
};
int PC_1[56] = { 
57, 49,	41,	33,	25,	17,	9,
1,	58,	50,	42,	34,	26,	18,
10,	2,	59,	51, 43, 35,	27,
19,	11,	3,	60,	52,	44,	36,
63,	55,	47,	39,	31,	23,	15,
7,	62,	54,	46,	38,	30,	22,
14,	6,	61,	53,	45,	37,	29,
21,	13,	5,	28,	20,	12,	4
};
int PC_2[48] = { 
14, 17,	11,	24,	1,	5,
3,	28,	15,	6,  21,	10,
23,	19,	12,	4,	26,	8,
16,	7,	27,	20,	13,	2,
41,	52,	31,	37,	47,	55,
30,	40,	51,	45,	33,	48,
44,	49,	39,	56,	34,	53,
46,	42,	50,	36,	29,	32
};
int E[48] = {32,  1,  2,  3,  4,  5,  4,  5,  6,  7,  8,  9,
8,  9, 10, 11, 12, 13, 12, 13, 14, 15, 16, 17,
16, 17, 18, 19, 20, 21, 20, 21, 22, 23, 24, 25,
24, 25, 26, 27, 28, 29, 28, 29, 30, 31, 32, 1 };

int S_Box[8][4][16] = {                     //8个S盒   三维数组
											// S1
	14, 4,  13,     1,  2, 15, 11,  8,  3, 10,  6, 12,  5,  9,  0,  7,
	0, 15,  7,  4, 14,  2, 13,  1, 10,  6, 12, 11,  9,  5,  3,  8,
	4,  1, 14,  8, 13,  6,  2, 11, 15, 12,  9,  7,  3, 10,  5,  0,
	15, 12,  8,  2,  4,  9,  1,  7,  5, 11,  3, 14, 10,  0,  6, 13,
	// S2
	15,  1,  8, 14,  6, 11,  3,  4,  9,  7,  2, 13, 12,  0,  5, 10,
	3, 13,  4,  7, 15,  2,  8, 14, 12,  0,  1, 10,  6,  9, 11,  5,
	0, 14,  7, 11, 10,  4, 13,  1,  5,  8, 12,  6,  9,  3,  2, 15,
	13,  8, 10,  1,  3, 15,  4,  2, 11,  6,  7, 12,  0,  5, 14,  9,
	// S3
	10,  0,  9, 14,  6,  3, 15,  5,  1, 13, 12,  7, 11,  4,  2,  8,
	13,  7,  0,  9,  3,  4,  6, 10,  2,  8,  5, 14, 12, 11, 15,  1,
	13,  6,  4,  9,  8, 15,  3,  0, 11,  1,  2, 12,  5, 10, 14,  7,
	1, 10, 13,  0,  6,  9,  8,  7,  4, 15, 14,  3, 11,  5,  2, 12,
	// S4
	7, 13, 14,  3,  0,  6,  9, 10,  1,  2,  8,  5, 11, 12,  4, 15,
	13,  8, 11,  5,  6, 15,  0,  3,  4,  7,  2, 12,  1, 10, 14,  9,
	10,  6,  9,  0, 12, 11,  7, 13, 15,  1,  3, 14,  5,  2,  8,  4,
	3, 15,  0,  6, 10,  1, 13,  8,  9,  4,  5, 11, 12,  7,  2, 14,
	// S5
	2, 12,  4,  1,  7, 10, 11,  6,  8,  5,  3, 15, 13,  0, 14,  9,
	14, 11,  2, 12,  4,  7, 13,  1,  5,  0, 15, 10,  3,  9,  8,  6,
	4,  2,  1, 11, 10, 13,  7,  8, 15,  9, 12,  5,  6,  3,  0, 14,
	11,  8, 12,  7,  1, 14,  2, 13,  6, 15,  0,  9, 10,  4,  5,  3,
	// S6
	12,  1, 10, 15,  9,  2,  6,  8,  0, 13,  3,  4, 14,  7,  5, 11,
	10, 15,  4,  2,  7, 12,  9,  5,  6,  1, 13, 14,  0, 11,  3,  8,
	9, 14, 15,  5,  2,  8, 12,  3,  7,  0,  4, 10,  1, 13, 11,  6,
	4,  3,  2, 12,  9,  5, 15, 10, 11, 14,  1,  7,  6,  0,  8, 13,
	// S7
	4, 11,  2, 14, 15,  0,  8, 13,  3, 12,  9,  7,  5, 10,  6,  1,
	13,  0, 11,  7,  4,  9,  1, 10, 14,  3,  5, 12,  2, 15,  8,  6,
	1,  4, 11, 13, 12,  3,  7, 14, 10, 15,  6,  8,  0,  5,  9,  2,
	6, 11, 13,  8,  1,  4, 10,  7,  9,  5,  0, 15, 14,  2,  3, 12,
	// S8
	13,  2,  8,  4,  6, 15, 11,  1, 10,  9,  3, 14,  5,  0, 12,  7,
	1, 15, 13,  8, 10,  3,  7,  4, 12,  5,  6, 11,  0, 14,  9,  2,
	7, 11,  4,  1,  9, 12, 14,  2,  0,  6, 10, 13, 15,  3,  5,  8,
	2,  1, 14,  7,  4, 10,  8, 13, 15, 12,  9,  0,  3,  5,  6, 11
};
int P[32] = {16, 7, 20, 21, 29, 12, 28, 17, 1,  15, 23, 26, 5,  18, 31, 10,
2,  8, 24, 14, 32, 27, 3,  9,  19, 13, 30, 6,  22, 11, 4,  25 };

int movetimes[17] = {0, 1,1,2,2,2,2,2,2,1,2,2,2,2,2,2,1 };
b48 finalKey[17];


DES::DES(b64 k) : k(k)//密钥生成
{
	b56 k_1;
	b28 k_c,k_d;
	b56 Key;
	//PC置换
	k_1=Reverse<64, 56>(k, PC_1);
	//循环移位
	//cout << k_1 << endl;
	k_c = (k_1 >> 28).to_ullong() ;
	k_d = (k_1 << 28 >> 28).to_ullong();
	//cout <<"c0:"<< k_c<<endl;
	//cout <<"d0:"<<k_d<<endl;
	//每轮移位置换
	for (int round = 1; round <= 16; round++)
	{
		k_c = movemove(k_c, movetimes[round]);
		k_d = movemove(k_d, movetimes[round]);
	//	cout <<"c"<<round<<":"<< k_c << endl;
	//	cout <<"d"<<round<<":"<< k_d << endl;
		
		for (int i = 28; i<56; ++i)
			Key[i] = k_c[i - 28];
		for (int i = 0; i<28; ++i)
			Key[i] = k_d[i];
		finalKey[round] = Reverse<56, 48>(Key, PC_2);
	//	cout << "第"<<round<<"轮子秘钥："<<finalKey[round] << endl;
	}
}

b64 DES::E_DES(b64 m)   //DES加密
{
	b64 m_1;
	b32 m_L, m_R;
	b64 result;
	b64 finalresult;
	m_1= Reverse<64, 64>(m, IP_1);
	m_L = (m_1 >> 32).to_ullong();
	m_R = (m_1 << 32 >> 32).to_ullong();
	for (int round = 1; round <= 16; round++)
	{
		b32 temp;
		temp=m_L^f(m_R, E, finalKey[round], S_Box);
		m_L = m_R;
		m_R = temp;
	}
	for (int i = 0; i<32; ++i)
		result[i] = m_L[i];
	for (int i = 32; i<64; ++i)
		result[i] = m_R[i - 32];
	finalresult = Reverse<64, 64>(result, IP_2);
	return finalresult;
}

b64 DES::D_DES(b64 c)   //DES解密
{
	b64 c_1;
	b32 c_L, c_R;
	b64 result;
	b64 finalresult;
	c_1 = Reverse<64, 64>(c, IP_1);
	c_L = (c_1 >> 32).to_ullong();
	c_R = (c_1 << 32 >> 32).to_ullong();
	for (int round = 1; round <= 16; round++)
	{
		b32 temp;
		temp = c_L^f(c_R, E, finalKey[17-round], S_Box);
		c_L = c_R;
		c_R = temp;
	}
	for (int i = 0; i<32; ++i)
		result[i] = c_L[i];
	for (int i = 32; i<64; ++i)
		result[i] = c_R[i - 32];
	finalresult = Reverse<64, 64>(result, IP_2);
	return finalresult;
}

b32 DES::f(b32 R, int E[48], b48 Key, int S_Box[8][4][16])   //F函数
{
	b32 temp;
	b48 large = Reverse<32, 48>(R, E);
	b48 num_xor = large^Key;
	b32 S;
	int x = 0;
	for (int i = 0; i<48; i = i + 6)
	{
		int row = num_xor[47 - i] * 2 + num_xor[47 - i - 5];
		int col = num_xor[47 - i - 1] * 8 + num_xor[47 - i - 2] * 4 + num_xor[47 - i - 3] * 2 + num_xor[47 - i - 4];
		int num = S_Box[i / 6][row][col];
		bitset<4> binary(num);
		S[31 - x] = binary[3];
		S[31 - x - 1] = binary[2];
		S[31 - x - 2] = binary[1];
		S[31 - x - 3] = binary[0];
		x += 4;
	}
	temp = Reverse<32, 32>(S, P);
	//cout<<"f函数输出："<<temp<<endl;
	return temp;
}




